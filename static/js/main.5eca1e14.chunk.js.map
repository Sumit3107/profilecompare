{"version":3,"sources":["components/compare.jsx","components/profile.jsx","redux/ActionCreators.js","redux/ActionTypes.js","App.js","shared/baseUrl.js","serviceWorker.js","redux/user.js","index.js","redux/configureStore.js"],"names":["Compare","props","Header","Layout","useState","username","setusername","className","id","span","justify","size","name","placeholder","onChange","e","target","value","prefix","UserOutlined","Item","to","type","htmlType","onClick","fetchuserinfo","submitProfile","profile","userErrMess","user","length","style","color","marginBottom","map","xs","offset","sm","md","hoverable","title","bordered","width","login","followers","following","public_repos","public_gists","adduserFailed","errmess","payload","adduserinfo","withRouter","connect","state","dispatch","fetchUserInfo","fetch","then","response","ok","error","Error","status","statusText","message","json","catch","path","component","errMess","from","Boolean","window","location","hostname","match","User","action","concat","sort","a","b","isLoading","store","createStore","combineReducers","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5eca1e14.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport { Row, Col, Button, Form, Input, Layout,Divider } from \"antd\";\r\nimport {Link } from \"react-router-dom\"\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport \"../css/main.css\";\r\nimport \"antd/dist/antd.css\";\r\nexport const Compare = (props) => {\r\n  const { Header } = Layout;\r\n  const [username,setusername]=useState([]);\r\n  const submitProfile=(username)=>{\r\n      props.fetchuserinfo(username)\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout>\r\n        <Header id=\"header\">\r\n          <h1 id=\"heading\">Git Profile Compare</h1>\r\n        </Header>\r\n      </Layout>\r\n      <Row>\r\n        <Col span={24} id=\"inputcontainer\">\r\n          <Row justify=\"center\">\r\n            <Col span={8}>\r\n              <Form>\r\n                <Input\r\n                  size=\"large\"\r\n                  name=\"username\"\r\n                  placeholder=\"Github UserName\"\r\n                  onChange={(e)=>setusername(e.target.value)}\r\n                  prefix={<UserOutlined />}\r\n                />\r\n                <Divider />\r\n                <Row justify=\"center\">\r\n                  <Form.Item>\r\n                    <Link to={`/home/${username}`}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" onClick={()=>submitProfile(username)} >\r\n                            Submit\r\n                        </Button>\r\n                    </Link>\r\n                  </Form.Item>\r\n                </Row>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Compare;\r\n","import React,{useState,useEffect} from \"react\";\r\nimport { Card,Col,Row} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"../css/main.css\";\r\nexport const profile = (props) => {\r\n  if (props.userErrMess) {\r\n    return <h4>{props.userErrMess} Refresh the Website</h4>;\r\n  } else if (props.user.user.length>0) {\r\n    return (\r\n      <div id=\"profileback\">\r\n        <Row justify=\"center\"><h1 style={{color:\"white\" }}>Ranked according to Followers</h1></Row>\r\n        <Row justify=\"center\"><p style={{color:\"white\" ,marginBottom:\"5%\"}}>More no. of followers results in top rank.</p></Row>\r\n        <Row justify=\"center\">\r\n        {props.user.user.map((user) => {\r\n          return (\r\n              <Col xs={{ span: 22, offset: 2 }} sm={{ span: 10, offset: 2 }} md={{ span: 6, offset: 2 }}>\r\n              <Card hoverable title=\"Profile Info\" bordered={false} style={{ width: 300,marginBottom:'5%' }} id=\"Cards\">\r\n                <h4><strong>Username: </strong>{user.login}</h4>\r\n                <p><strong>Followers: </strong>{user.followers}</p>\r\n                <p><strong>Following: </strong>{user.following}</p>\r\n                <p><strong>Public Repos: </strong>{user.public_repos}</p>\r\n                <p><strong>Public Gists: </strong>{user.public_gists}</p>\r\n              </Card>\r\n              </Col>\r\n          );\r\n        })}\r\n        </Row>\r\n      </div>\r\n    );\r\n  } else return <div></div>;\r\n};\r\n\r\nexport default profile;\r\n","import * as ActionTypes from \"./ActionTypes\";\r\nimport { baseUrl } from \"../shared/baseUrl\";\r\n\r\nexport const fetchUserInfo = (username) => (dispatch) => {\r\n  return fetch(baseUrl + username)\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((user) => dispatch(adduserinfo(user)))\r\n    .catch((error) => dispatch(adduserFailed(error.message)));\r\n};\r\nexport const adduserFailed = errmess => ({\r\n    type: ActionTypes.USER_FAILED,\r\n    payload: errmess\r\n  });\r\nexport const adduserinfo = (user) => ({\r\n  type: ActionTypes.ADD_USER,\r\n  payload: user,\r\n});\r\n","export const ADD_USER = \"ADD_USER\";\r\nexport const USER_FAILED = \"USER_FAILED\";","import React from \"react\";\nimport { Route, Switch, Redirect,withRouter } from \"react-router-dom\";\nimport Compare from \"./components/compare\";\nimport Profile from \"./components/profile\";\nimport { connect } from \"react-redux\";\nimport { adduserinfo, fetchUserInfo} from \"./redux/ActionCreators\";\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\nconst mapDispatchToProps = (dispatch) => ({\n  adduserinfo: () => dispatch(adduserinfo()),\n  fetchUserInfo: (username) => {\n    dispatch(fetchUserInfo(username));\n  }\n});\nexport const App = (props) => {\n  return (\n    <div className=\"App\">\n      <Compare fetchuserinfo={props.fetchUserInfo} />\n      <Switch>\n        <Route path=\"/profilecompare/:username\" component={()=><Profile user={props.user} userErrMess={props.user.errMess} {...props} />} />\n        <Redirect from=\"/\" to=\"/profilecompare\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","export const baseUrl = \"https://api.github.com/users/\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const User = (state = { errMess: null, user: [] }, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_USER:\r\n      var user = action.payload;\r\n      state.user=state.user.concat(user)\r\n      return { ...state, user: state.user.length > 0 ? [...state.user.sort((a,b) => b.followers - a.followers)] : state.user };\r\n    case ActionTypes.USER_FAILED:\r\n        return { ...state, isLoading: false, errMess: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\"\nimport { ConfigureStore } from \"./redux/configureStore\";\nimport { Provider } from \"react-redux\";\nconst store = ConfigureStore();\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Provider store={store}>\n    <App />\n    </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers,applyMiddleware } from \"redux\"\r\nimport { User } from \"./user\"\r\nimport thunk from \"redux-thunk\"\r\nimport logger from \"redux-logger\"\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n      combineReducers({\r\n        user:User\r\n      }),\r\n      applyMiddleware(thunk, logger)\r\n    );\r\n  \r\n    return store;\r\n  };\r\n"],"sourceRoot":""}